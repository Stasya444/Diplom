import { prisma } from "~/server/utils/prisma";
import { writeFile } from "fs/promises";
import { join } from "path";
import { v4 as uuidv4 } from "uuid";

export default defineEventHandler(async (event) => {
  const form = await readMultipartFormData(event);
  if (!form) {
    return { success: false, message: "–§–æ—Ä–º–∞ –Ω–µ –Ω–∞–¥—ñ–π—à–ª–∞." };
  }

  const fields: Record<string, string> = {};
  const photos: string[] = [];

  for (const item of form) {
    if (item.type === "file" && item.filename && item.data) {
      const fileName = `${uuidv4()}-${item.filename}`;
      const filePath = join("public", "uploads", fileName);
      await writeFile(filePath, item.data);
      photos.push(`/uploads/${fileName}`);
    } else if (item.type === "field" && item.name && item.data) {
      fields[item.name] = Buffer.from(item.data).toString("utf8");
    }
  }

  // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –æ–±–æ–≤'—è–∑–∫–æ–≤–∏—Ö –ø–æ–ª—ñ–≤
  const required = ["firstName", "lastName", "city", "style", "price", "about"];
  for (const key of required) {
    if (!fields[key]) {
      return { success: false, message: `–ü–æ–ª–µ ${key} —î –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–∏–º` };
    }
  }

  if (isNaN(Number(fields.price))) {
    return { success: false, message: "–¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ —á–∏—Å–ª–æ–º" };
  }

  const fullName = `${fields.firstName} ${fields.lastName}`.trim();

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å
  const existing = await prisma.photographer.findFirst({
    where: { name: fullName },
  });
  if (existing) {
    return { success: false, message: "–§–æ—Ç–æ–≥—Ä–∞—Ñ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î" };
  }

  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∞ –∑ isVerified: false
  const photographer = await prisma.photographer.create({
    data: {
      name: fullName,
      city: fields.city,
      style: fields.style,
      price: Number(fields.price),
      about: fields.about,
      isVerified: false, // üëâ –¥–æ–¥–∞—î–º–æ —Å—Ç–∞—Ç—É—Å
    },
  });

  // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
  for (const url of photos) {
    await prisma.photo.create({
      data: {
        url: url,
        photographerId: photographer.id,
      },
    });
  }

  return {
    success: true,
    message: "–ê–Ω–∫–µ—Ç—É –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.",
    id: photographer.id,
    uploadedPhotos: photos.length,
  };
});
