import { prisma } from "~/server/utils/prisma";
import { compare } from "bcryptjs";
import jwt from "jsonwebtoken";

export default defineEventHandler(async (event) => {
  const body = await readBody(event);
  const { email, password } = body;

  if (!email || !password) {
    return { success: false, message: "–í–≤–µ–¥—ñ—Ç—å email —ñ –ø–∞—Ä–æ–ª—å" };
  }

  // üîç –í–∞–ª—ñ–¥–∞—Ü—ñ—è email
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return { success: false, message: "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π email" };
  }

  const user = await prisma.user.findUnique({ where: { email } });
  if (!user) {
    return { success: false, message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" };
  }

  const passwordMatch = await compare(password, user.password);
  if (!passwordMatch) {
    return { success: false, message: "–ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" };
  }

  // üîê –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞
  const token = jwt.sign({ id: user.id, role: user.role }, "secret_key", {
    expiresIn: "7d",
  });

  // üç™ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –≤ cookie
  setCookie(event, "token", token, {
    httpOnly: true,
    path: "/",
    maxAge: 60 * 60 * 24 * 7, // 7 –¥–Ω—ñ–≤
  });

  // üß† –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —É cookie (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)
  setCookie(event, "user_email", email, {
    path: "/",
    maxAge: 60 * 60 * 24 * 7,
  });

  return {
    success: true,
    message: "–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π",
    user: {
      id: user.id,
      name: user.name,
      role: user.role,
      email: user.email,
    },
  };
});
